{"version":3,"sources":["service/API/API.js","views/MouviePage/MouviPage.js"],"names":["key","fetchTrandMovie","axios","get","then","response","data","fetchDetailsMovie","moviesId","fetchActors","fetchReview","fetchQuery","search","Search","lazy","MoviesPage","history","useHistory","location","useLocation","url","useRouteMatch","useState","movies","setMovies","useEffect","query","URLSearchParams","a","results","catch","error","console","warn","fetchQueryMovies","onSubmit","push","autoClose","map","movie","to","pathname","id","state","from","title","name"],"mappings":"0IAAA,+LACMA,EAAM,mCAGL,SAASC,IACd,OAAOC,IACJC,IADI,kEAC2DH,EAD3D,gCAHI,IAKTI,MAAK,SAACC,GACJ,OAAOA,EAASC,QAIf,SAASC,EAAkBC,GAChC,OAAON,IACJC,IADI,6CACsCK,EADtC,oBAC0DR,EAD1D,oBAELI,MAAK,SAACC,GACJ,OAAOA,EAASC,QAIf,SAASG,EAAYD,GAC1B,OAAON,IACJC,IADI,6CACsCK,EADtC,4BACkER,EADlE,oBAEJI,MAAK,SAACC,GACL,OAAOA,EAASC,QAIf,SAASI,EAAYF,GAC1B,OAAON,IACJC,IADI,6CACsCK,EADtC,4BACkER,EADlE,oBAEJI,MAAK,SAACC,GACL,OAAOA,EAASC,QAIf,SAASK,EAAWC,GACzB,OAAOV,IACJC,IADI,4DAEkDH,EAFlD,iCAE8EY,IAElFR,MAAK,SAACC,GACL,OAAOA,EAASC,U,yICrChBO,EAASC,gBAAK,kBAAM,gCAiDXC,UA/CI,WACjB,IAAMC,EAAUC,cACVC,EAAWC,cAEXC,EAAQC,cAARD,IACN,EAA4BE,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACR,GAAwB,KAApBP,EAASN,OAAb,CAEA,IAAMc,EAAQ,IAAIC,gBAAgBT,EAASN,QAAQT,IAAI,UACjC,uCAAG,sBAAAyB,EAAA,+EAChBjB,YAAWe,GACftB,MAAK,SAACE,GAAD,OAAUkB,EAAUlB,EAAKuB,YAC9BC,OAAM,SAACC,GAAD,OAAWC,QAAQC,KAAKF,OAHV,2CAAH,qDAKtBG,MACC,CAAChB,EAASN,SAMb,OACE,qCACE,cAACC,EAAD,CAAQsB,SANkB,SAACvB,GAC7BI,EAAQoB,KAAR,2BAAkBlB,GAAlB,IAA4BN,OAAO,SAAD,OAAWA,SAM3C,cAAC,IAAD,CAAgByB,UAAW,MAC1Bd,GACC,6BACGA,EAAOe,KAAI,SAACC,GAAD,OACV,6BACE,eAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAKrB,EAAL,YAAYmB,EAAMG,IAC1BC,MAAO,CAAEC,KAAM1B,IAHnB,UAMGqB,EAAMM,MANT,IAMiBN,EAAMO,SAPhBP,EAAMG","file":"static/js/10.42b2abb6.chunk.js","sourcesContent":["import axios from 'axios';\nconst key = '037637c92dbb2c5df8386bba9376d18a';\nconst page = 1;\n\nexport function fetchTrandMovie() {\n  return axios\n    .get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${key}&language=en-US&page=${page}`\n  ).then((response) => {\n      return response.data;\n    });\n};\n\nexport function fetchDetailsMovie(moviesId) {\n  return axios\n    .get(`https://api.themoviedb.org/3/movie/${moviesId}?api_key=${key}&language=en-US`\n  ).then((response) => {\n      return response.data;\n    });\n};\n\nexport function fetchActors(moviesId) {\n  return axios\n    .get(`https://api.themoviedb.org/3/movie/${moviesId}/credits?api_key=${key}&language=en-US`)\n    .then((response) => {\n      return response.data;\n    });\n}\n\nexport function fetchReview(moviesId) {\n  return axios\n    .get(`https://api.themoviedb.org/3/movie/${moviesId}/reviews?api_key=${key}&language=en-US`)\n    .then((response) => {\n      return response.data;\n    });\n}\n\nexport function fetchQuery(search) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${key}&language=en-US&query=${search}`\n    )\n    .then((response) => {\n      return response.data;\n    });\n}\n\n\n\n\n\n\n","import React, { useEffect, useState, lazy } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Link, useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\nimport { fetchQuery } from \"../../service/API/API\";\nconst Search = lazy(() => import(\"../../Components/Search/Search\"));\n\nconst MoviesPage = () => {\n  const history = useHistory();\n  const location = useLocation();\n    \n  let { url } = useRouteMatch();\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    if (location.search === \"\") return;\n\n    const query = new URLSearchParams(location.search).get(\"query\");\n    const fetchQueryMovies = async () => {\n      return fetchQuery(query)\n        .then((data) => setMovies(data.results))\n        .catch((error) => console.warn(error));\n    };\n    fetchQueryMovies();\n  }, [location.search]);\n\n  const handleSearchbarSubmit = (search) => {\n    history.push({ ...location, search: `query=${search}` });\n  };\n\n  return (\n    <>\n      <Search onSubmit={handleSearchbarSubmit} />\n      <ToastContainer autoClose={3000} />\n      {movies && (\n        <ul>\n          {movies.map((movie) => (\n            <li key={movie.id}>\n              <Link\n                to={{\n                  pathname: `${url}/${movie.id}`,\n                  state: { from: location },\n                }}\n              >\n                {movie.title} {movie.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"sourceRoot":""}